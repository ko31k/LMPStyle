// Lampa Plugin: hide_green_notifications.plugin.js
// –í–µ—Ä—Å—ñ—è: 1.0.0
// –ê–≤—Ç–æ—Ä: AI Assistant
// –û–ø–∏—Å: –ü—Ä–∏—Ö–æ–≤—É—î –∑–µ–ª–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –≤ Lampa Player

(function() {
    'use strict';
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞
    const PLUGIN_NAME = 'hide_green_notifications';
    const PLUGIN_SETTING = 'lampa_hide_green';
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Lampa
    if (typeof Lampa === 'undefined') {
        console.warn('Lampa not found - plugin cannot initialize');
        return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try {
        if (localStorage && localStorage.getItem(PLUGIN_SETTING) === 'off') {
            console.log('Green notifications plugin is disabled');
            return;
        }
    } catch(e) {
        console.warn('Cannot access localStorage:', e);
    }
    
    // –§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–ª–∞–≥—ñ–Ω–∞
    function initPlugin() {
        // –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ Lampa –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
        if (!Lampa.Noty || typeof Lampa.Noty.show !== 'function') {
            setTimeout(initPlugin, 100);
            return;
        }
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        const originalShow = Lampa.Noty.show;
        
        // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—É —Å–ø–æ–≤—ñ—â–µ–Ω—å
        Lampa.Noty.show = function(text, type, time) {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∑–µ–ª–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (type === 'error')
            if (type === 'error') {
                console.log('üîá Hidden green notification:', text);
                return false; // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            }
            
            // –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É
            return originalShow.apply(this, arguments);
        };
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –º–æ–∂–ª–∏–≤—ñ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –º–µ—Ç–æ–¥–∏
        patchAlternativeMethods();
        
        console.log('‚úÖ Green error notifications plugin: active');
    }
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ —Å–ø–æ–≤—ñ—â–µ–Ω—å
    function patchAlternativeMethods() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤—ñ –º–µ—Ç–æ–¥–∏
        const alternativeMethods = [
            'toast',
            'notification',
            'showNotification',
            'displayMessage'
        ];
        
        alternativeMethods.forEach(method => {
            if (Lampa[method] && typeof Lampa[method] === 'function') {
                const originalMethod = Lampa[method];
                Lampa[method] = function() {
                    // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫
                    const args = Array.from(arguments);
                    const hasError = args.some(arg => 
                        typeof arg === 'string' && arg.toLowerCase().includes('error') ||
                        (arg && arg.type === 'error')
                    );
                    
                    if (hasError) {
                        console.log('üîá Hidden alternative error:', args);
                        return false;
                    }
                    
                    return originalMethod.apply(this, arguments);
                };
            }
        });
    }
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    function createControlInterface() {
        // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        window.hideGreenNotifications = {
            enable: function() {
                try {
                    localStorage.removeItem(PLUGIN_SETTING);
                    console.log('‚úÖ Green notifications hiding enabled');
                    location.reload();
                } catch(e) {
                    console.error('Cannot enable plugin:', e);
                }
            },
            
            disable: function() {
                try {
                    localStorage.setItem(PLUGIN_SETTING, 'off');
                    console.log('‚ùå Green notifications hiding disabled');
                    location.reload();
                } catch(e) {
                    console.error('Cannot disable plugin:', e);
                }
            },
            
            status: function() {
                try {
                    const isEnabled = localStorage.getItem(PLUGIN_SETTING) !== 'off';
                    console.log('Plugin status:', isEnabled ? 'ENABLED' : 'DISABLED');
                    return isEnabled;
                } catch(e) {
                    console.error('Cannot check status:', e);
                    return false;
                }
            }
        };
    }
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    function start() {
        createControlInterface();
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø–ª–∞–≥—ñ–Ω–∞
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            initPlugin();
        } else {
            document.addEventListener('DOMContentLoaded', initPlugin);
            window.addEventListener('load', initPlugin);
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–≥—ñ–Ω
    start();
    
})();

// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π CSS –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å–µ –∂ –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è)
(function() {
    'use strict';
    
    const css = `
        /* –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∑–µ–ª–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è */
        .notyf__toast--error,
        .notification-error,
        .toast-error,
        .lampa-notify-error,
        [class*="error"],
        [class*="Error"] {
            display: none !important;
            visibility: hidden !important;
            opacity: 0 !important;
            height: 0 !important;
            width: 0 !important;
            padding: 0 !important;
            margin: 0 !important;
            border: none !important;
        }
    `;
    
    // –î–æ–¥–∞—î–º–æ CSS –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
    const style = document.createElement('style');
    style.id = 'hide-green-notifications-css';
    style.textContent = css;
    
    if (document.head) {
        document.head.appendChild(style);
    } else {
        document.addEventListener('DOMContentLoaded', function() {
            document.head.appendChild(style);
        });
    }
})();
