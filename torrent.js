(function(){
    // –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∑–∞–º—ñ–Ω
    const REPLACEMENTS = {
        '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': '–î—É–±–ª—å–æ–≤–∞–Ω–∏–π',
        'Ukr': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é',
        'Ua': 'üá∫üá¶ Ua',
        '–î—É–±–ª—è–∂': '–î—É–±–ª—å–æ–≤–∞–Ω–∏–π',
        '–ú–Ω–æ–≥–æ–≥–æ–ª–æ—Å—ã–π': '–ë–∞–≥–∞—Ç–æ–≥–æ–ª–æ—Å–∏–π',
        '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é',
        'Zetvideo': 'UaFlix',
        '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞': '–Ü—Å—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—ñ–¥—Å—É—Ç–Ω—è'
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–∏–ª—ñ–≤
    const STYLES = {
        // –°—Ç–∏–ª—ñ –¥–ª—è —Ä–æ–∑–¥–∞—á (–†–æ–∑–¥–∞—é—Ç—å)
        '.torrent-item span.low-seeds': {
            color: '#ff0000',
            'font-weight': 'bold'
        },
        '.torrent-item span.medium-seeds': {
            color: '#ffff00',
            'font-weight': 'bold'
        },
        '.torrent-item span.high-seeds': {
            color: '#2ecc71',
            'font-weight': 'bold'
        },
        // –°—Ç–∏–ª—ñ –¥–ª—è –±—ñ—Ç—Ä–µ–π—Ç—É
        '.torrent-item span.low-bitrate': {
            color: '#3498db',
            'font-weight': 'bold'
        },
        '.torrent-item span.medium-bitrate': {
            color: '#2ecc71',
            'font-weight': 'bold'
        },
        '.torrent-item span.high-bitrate': {
            color: '#e74c3c',
            'font-weight': 'bold'
        },
        // –°—Ç–∏–ª—ñ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä—ñ–≤
        '.torrent-item span.toloka-tracker': {
            color: '#2ecc71',
            'font-weight': 'bold'
        },
        '.torrent-item span.utopia-tracker': {
            color: '#9b59b6',
            'font-weight': 'bold'
        }
    };

    // –î–æ–¥–∞—î–º–æ CSS-—Å—Ç–∏–ª—ñ
    let style = document.createElement('style');
    style.innerHTML = Object.entries(STYLES).map(([selector, props]) => {
        return selector + ' { ' + Object.entries(props).map(([prop, val]) => prop + ': ' + val + ' !important').join('; ') + ' }';
    }).join('\n');
    document.head.appendChild(style);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—ñ–≤ —É –≤–∫–∞–∑–∞–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
    function replaceTexts() {
        // –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤, –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —à—É–∫–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∏ –¥–ª—è –∑–∞–º—ñ–Ω–∏
        const containers = [
            '.online-prestige-watched__body',
            '.online-prestige--full .online-prestige__title',
            '.online-prestige--full .online-prestige__info'
        ];

        containers.forEach(selector => {
            document.querySelectorAll(selector).forEach(container => {
                // –ó–∞–º—ñ–Ω—è—î–º–æ —Ç–µ–∫—Å—Ç —É –≤—Å—ñ—Ö –≤—É–∑–ª–∞—Ö-–Ω–∞—â–∞–¥–∫–∞—Ö
                const walker = document.createTreeWalker(
                    container,
                    NodeFilter.SHOW_TEXT,
                    null,
                    false
                );

                let node;
                while (node = walker.nextNode()) {
                    let text = node.nodeValue;
                    Object.entries(REPLACEMENTS).forEach(([original, replacement]) => {
                        if (text.includes(original)) {
                            text = text.replace(new RegExp(original, 'g'), replacement);
                        }
                    });
                    node.nodeValue = text;
                }
            });
        });
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ —Ç–æ—Ä–µ–Ω—Ç—ñ–≤
    function updateTorrentStyles() {
        // –®—É–∫–∞—î–º–æ –≤—Å—ñ span –≤ torrent-item
        document.querySelectorAll('.torrent-item span').forEach(span => {
            const text = span.textContent.trim();
            const lowerText = text.toLowerCase();
            
            // –û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–¥–∞—á (–†–æ–∑–¥–∞—é—Ç—å)
            if (text.includes('–†–æ–∑–¥–∞—é—Ç—å:')) {
                const seeds = parseInt(text.replace('–†–æ–∑–¥–∞—é—Ç—å:', '').trim()) || 0;
                span.classList.remove('low-seeds', 'medium-seeds', 'high-seeds');
                
                if (seeds <= 4) {
                    span.classList.add('low-seeds');
                } else if (seeds <= 14) {
                    span.classList.add('medium-seeds');
                } else {
                    span.classList.add('high-seeds');
                }
            }
            
            // –û–±—Ä–æ–±–∫–∞ –±—ñ—Ç—Ä–µ–π—Ç—É
            else if (text.includes('–ë—ñ—Ç—Ä–µ–π—Ç:')) {
                const bitrateText = text.replace('–ë—ñ—Ç—Ä–µ–π—Ç:', '').replace('–ú–±—ñ—Ç/—Å', '').trim();
                const bitrate = parseFloat(bitrateText) || 0;
                span.classList.remove('low-bitrate', 'medium-bitrate', 'high-bitrate');
                
                if (bitrate <= 10) {
                    span.classList.add('low-bitrate');
                } else if (bitrate <= 40) {
                    span.classList.add('medium-bitrate');
                } else {
                    span.classList.add('high-bitrate');
                }
            }
            
            // –û–±—Ä–æ–±–∫–∞ —Ç—Ä–µ–∫–µ—Ä—ñ–≤
            else if (lowerText.includes('toloka')) {
                span.classList.add('toloka-tracker');
            }
            else if (lowerText.includes('utopia')) {
                span.classList.add('utopia-tracker');
            }
        });
    }

    // –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    function updateAll() {
        replaceTexts();
        updateTorrentStyles();
    }

    // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á
    const observer = new MutationObserver(mutations => {
        if (mutations.some(m => m.addedNodes.length)) {
            updateAll();
        }
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    observer.observe(document.body, { childList: true, subtree: true });
    updateAll();
})();

Lampa.Platform.tv();
